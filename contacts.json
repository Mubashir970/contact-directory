import json
from github import Github

# Authenticate to GitHub
def authenticate_github(token):
    g = Github(token)
    repo = g.get_repo("your-username/contact-directory")  # Replace with your GitHub repo
    return repo

# Load contacts from GitHub
def load_contacts(repo):
    try:
        file = repo.get_contents("contacts.json")
        contacts = json.loads(file.decoded_content.decode())
        return contacts
    except:
        return []  # Return an empty list if the file doesn't exist

# Save contacts to GitHub
def save_contacts(repo, contacts):
    # Update or create the contacts.json file
    try:
        file = repo.get_contents("contacts.json")
        repo.update_file(file.path, "Updating contacts", json.dumps(contacts), file.sha)
    except:
        repo.create_file("contacts.json", "Initial contacts file", json.dumps(contacts))

# Display contacts
def display_contacts(contacts):
    if not contacts:
        print("No contacts to show.")
        return
    for index, contact in enumerate(contacts):
        print(f"{index+1}. {contact['name']} - {contact['phone']} - {contact['email']}")

# Main menu
def main():
    token = "your-github-personal-access-token"  # Replace with your GitHub personal access token
    repo = authenticate_github(token)
    
    while True:
        contacts = load_contacts(repo)
        print("\nContact Directory Menu:")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Delete Contact")
        print("4. Exit")
        choice = input("Enter choice: ")

        if choice == '1':
            name = input("Enter contact name: ")
            phone = input("Enter contact phone: ")
            email = input("Enter contact email: ")
            contacts.append({"name": name, "phone": phone, "email": email})
            save_contacts(repo, contacts)
        elif choice == '2':
            display_contacts(contacts)
        elif choice == '3':
            contact_index = int(input("Enter contact number to delete: ")) - 1
            if 0 <= contact_index < len(contacts):
                del contacts[contact_index]
                save_contacts(repo, contacts)
            else:
                print("Invalid contact number.")
        elif choice == '4':
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()

